* Python Tips & Tricks

** Argument parsing

When parsing arguments into the python interpreter, we can access the argument information with the `sys` module.

1. Calling python with no arguments
#+BEGIN_SRC python
$> python 
Python 3.9.1 (default, Jan  8 2021, 17:17:43)
[Clang 12.0.0 (clang-1200.0.32.28)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys
>>> sys.argv[0]
''
#+END_SRC

#+RESULTS:

2. Calling a python script interactively
#+BEGIN_SRC python
$> python -i example.py
2 is a prime number
3 is a prime number
4 equals 2 * 2
...
9 equals 3 * 3
>>> import sys
>>> sys.argv
['example.py']
#+END_SRC

3. Calling a python script as a module
#+BEGIN_SRC python
$> python -i -m example
2 is a prime number
3 is a prime number
4 equals 2 * 2
...
9 equals 3 * 3
>>> import sys
>>> sys.argv
['/Users/alfredang/Code/tis-but-a-scratch/pythonTutorial/ch2_interpreter/example.py']
#+END_SRC


** Default function arguments

When a default value is specified for a function argument, it is only evaluated once. This might cause issues when the value required is mutable (lists/dictionary/class instances).

#+BEGIN_SRC python :tangle defaultFunctionArguments.py
def gimmeAdd(x, acc=[]):
  acc.append(x)
  return acc

print(gimmeAdd(1))
print(gimmeAdd(2))
print(gimmeAdd(3))
#+END_SRC

The above snippet yields:

#+BEGIN_SRC python
[1]
[1,2]
[1,2,3]
#+END_SRC

However, if we want a fresh instance of an empty list each time `gimmeAdd` is called, we instantiate `acc` with `None` instead.

#+BEGIN_SRC python
def gimmeAdd2(x, acc=None):
  if acc is None:
    acc = []
  acc.append(x)
  return acc

print(gimmeAdd2(1))
print(gimmeAdd2(2))
print(gimmeAdd2(3))
#+END_SRC

Running this new version yields:
#+BEGIN_SRC python
[1]
[2]
[3]
#+END_SRC


** Functions

*** Kwargs

With function definitions, when a final formal parameter of the form `**kwargs` is present, the function receives a dictionary containing all keyword arguments except for those corresponding to a formal parameter. 

#+BEGIN_SRC python
def goodBurger(kind, **keywords):
    print("-- Do you have any", kind, "?")
    print("-- We dont't have any", kind)
    print("-" * 40)
    print(keywords)


>>> print(goodBurger( "Good Burger"
>>>                 , establishment="Good Burger"
>>>                 , motto="Welcome to Good Burger, Home of the Good Burger"
>>>                 ) )

-- Do you have any Good Burger ?
-- We dont't have any Good Burger
----------------------------------------
{'establishment': 'Good Burger', 'motto': 'Welcome to Good Burger, Home of the Good Burger'}
None
#+END_SRC

Note: The goodBurger function returns None, which is why there's a None printed at the end of the codeblock above.


*** Namespace collisions within functions

Consider the following function definition:
#+BEGIN_SRC python
def foo(name, **kwds):
  return 'name' in kwds
#+END_SRC

Because `name` is always bound to the first parameter, running the function will throw an error. However, with the argument seperators `/` (positional only) and `*` (keyword only), it is possible. 

#+BEGIN_SRC python
def foo(name, /, **kwds): # anything before '/' is a positional argument only
  return 'name' in kwds

>>> foo(1, **{'name':2})
True 
#+END_SRC



** Lists

*** Using Lists as Queues(FIFO)

Python Lists are great as stacks (FILO), but terrible as queues because doing inserts/pops from the beginning of a list requires all other elements to be shifted by one. To implement a queue, use `collections.deque` which was designed to have fast appends and pops from both ends.

#+BEGIN_SRC python
>>> from collections import deque
>>> queue = deque(["Eric", "John", "Michael"])
>>> queue.append("Terry")   # add Terry to queue
>>> queue.popleft()         # first to arrive now leaves
'Eric'
>>> queue.popleft()         # second to arrive now leaves
'John'
>>> queue                   # remaining queue
deque(['Michael', 'Terry'])
#+END_SRC

** Modules!
(I'm actually using this as an excuse to try out org-mode's tangle function)

A module is a file containing Python definitions and statements. The file name is the module name with the suffix `.py` appended. The module's name is also available within it as the value of the global variable `__name__`.

#+begin_src python :tangle fibo.py
  # Fibonacci numbers module
  def fib(n):       #write Fibonacci series up to n
    a, b = 0, 1
    while a < n:
        print(a, end=' ')
        a, b = b, a + b
    print()

  def fib2(n):      # return Fibonacci series up to n
    result = []
    a, b = 0, 1
    while a < n:
        result.append(a)
        a, b = b, a + b
    return result
#+end_src

Importing and running the module within Python's REPL yields
#+begin_src bash
  >>> import fibo
  >>> fibo.fib(1000)
  0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
  >>> fibo.fib2(100)
  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
  >>> fibo.__name__
  'fibo'
#+end_src

*** Module Search Paths
Given some imported module `spam`, the interpreter first searches for a built-in module with that name. If not found, it searches for `spam.py` within a list of directories given by `sys.path`. `sys.path` typically comes initialized with the following locations:

   1. The directory containing the input script (or current directory if no file is specified)
   2. the environmental variable `PYTHONPATH`
   3. the installation-dependent default

In the case of (1) with *nix OSes, any symlinks will be followed before the directories are added to `sys.path`. Therefore, directories containing symlinks themselves will not be added.


** Classes

*** Scopes and namespaces
Key takeaways, `global` & `nonlocal` keybinding
#+begin_src python :tangle scopes.py
  def scope_test():
      def do_local():
          spam = "local spam"

      def do_nonlocal():
          nonlocal spam
          spam ="nonlocal spam"

      def do_global():
          global spam
          spam = "global spam"

      spam = "test spam"
      do_local()
      print("After local assignment:", spam)
      do_nonlocal()
      print("After nonlocal assignment:", spam)
      do_global()
      print("After global assignment:", spam)

  scope_test()
  print("In global scope:", spam)
#+end_src

Output is as follows:
#+begin_src bash
After local assignment: test spam
After nonlocal assignment: nonlocal spam
After global assignment: nonlocal spam
In global scope: global spam
#+end_src

Notice that local assignment does not change `scope_test`'s binding of `spam`. The `nonlocal` assignment modified `scope_test`'s binding of spam, and the `global` assignment changed module-level binding.

*** Class definition syntax
